{"version":3,"sources":["js/RecipeModal.js","js/App.js","js/serviceWorker.js","index.js"],"names":["RecipeModal","props","state","recipe","id","fetch","then","res","json","data","setState","Modal","this","Header","closeButton","Title","modalTitle","Body","modalId","getRecipe","Footer","Button","variant","onClick","onHide","React","Component","apiKeys","App","ingredients","resultingRecipes","showRecipe","recipeId","recipeTitle","handleSearch","bind","handleIngredientChange","buildRequest","showRecipes","closeRecipes","fetchResults","catch","err","console","log","e","target","value","split","apiKey","i","ingredientString","length","replace","toString","preventDefault","numberOfKeys","request","ok","Error","error","className","Container","Form","onSubmit","Row","Col","style","paddingRight","Group","controlId","Control","required","type","placeholder","onChange","Feedback","md","paddingLeft","map","Card","key","width","Image","height","src","image","alt","title","fluid","show","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74862fbf.chunk.js","sourcesContent":["import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nexport default class RecipeModal extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            recipe: []\r\n        }\r\n    }\r\n\r\n    getRecipe(id){\r\n        fetch(\"https://api.spoonacular.com/recipes/\" + id\r\n        + \"/analyzedInstructions?apiKey=053c403cb3f34a599d8b22c9afa1293b\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({recipe: data});\r\n            })\r\n    }\r\n    render(){\r\n        return(\r\n            <Modal {...this.props}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                  {this.props.modalTitle}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                {this.props.modalId}\r\n                {this.getRecipe(this.props.modalId)}\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={this.props.onHide}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Form, Container, Button, Row, Col, Image, Card } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../css/App.css';\r\n//import Modal from 'react-bootstrap/Modal';\r\nimport RecipeModal from './RecipeModal';\r\n\r\n// Constants\r\nconst numberOfResults = 9\r\nconst apiKeys = [\r\n  'f9ca635dd36148128474e808f56ca996',\r\n  'bc971f99f0344848a295b37d2d04d829',\r\n  '053c403cb3f34a599d8b22c9afa1293b',\r\n  '69c636750f134249ae3dee79acebc3da'\r\n]\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ingredients: [],\r\n      resultingRecipes: [],\r\n      showRecipe: false,\r\n      recipeId: 0,\r\n      recipeTitle: 0,\r\n    };\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleIngredientChange = this.handleIngredientChange.bind(this);\r\n    this.buildRequest = this.buildRequest.bind(this);\r\n    this.showRecipes = this.showRecipes.bind(this);\r\n    this.closeRecipes = this.closeRecipes.bind(this);\r\n    this.fetchResults = this.fetchResults.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Comment out for production\r\n    // This populates the resulting recipes with an actual response for testing! :)\r\n    fetch('spoonacularExampleResponse.json')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({ resultingRecipes: data });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  handleIngredientChange(e) {\r\n    this.setState({\r\n      ingredients: e.target.value.split(','),\r\n    })\r\n  }\r\n\r\n  buildRequest(apiKey) {\r\n    // Using the list or array of ingredients, build the search request and perform it\r\n    let ingredientString = \"\";\r\n    \r\n    // Build string containing ingredients to add to request\r\n    let i;\r\n    for (i = 0; i < this.state.ingredients.length; i++) {\r\n      if (i === 0) {\r\n        ingredientString += (this.state.ingredients[i] + \",\")\r\n      } else {\r\n        ingredientString += (\"+\" + this.state.ingredients[i] + \",\")\r\n      }\r\n    }\r\n    ingredientString = ingredientString.replace(/,\\s*$/, \"\")\r\n    \r\n    return 'https://api.spoonacular.com/recipes/findByIngredients?ingredients=' \r\n      + ingredientString \r\n      + '&number=' \r\n      + numberOfResults.toString() \r\n      + '&apiKey='\r\n      + apiKey;\r\n  }\r\n\r\n  handleSearch(e) {\r\n    e.preventDefault();\r\n    // Reference request\r\n    // https://api.spoonacular.com/recipes/findByIngredients?ingredients=apples,+flour,+sugar&number=2&apiKey=bc971f99f0344848a295b37d2d04d829\r\n    if (this.state.ingredients.length > 0) {\r\n      this.fetchResults(apiKeys.length)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          this.setState({ resultingRecipes: data });\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n  fetchResults(numberOfKeys) {\r\n    let request = this.buildRequest(apiKeys[numberOfKeys - 1]);\r\n    \r\n    return fetch(request)\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res;\r\n        } else {\r\n          throw new Error(\"Not valid\");\r\n        }\r\n      })\r\n      .catch(error => {\r\n        if ((numberOfKeys - 1) < 0) throw error;\r\n        return this.fetchResults(numberOfKeys - 1);\r\n      })\r\n  }\r\n\r\n  showRecipes(recipeId,recipeTitle){\r\n    this.setState({showRecipe: true, recipeId, recipeTitle});\r\n  }\r\n\r\n  closeRecipes(){\r\n    this.setState({showRecipe: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Container>\r\n          <br></br>\r\n          <Form onSubmit={this.handleSearch}>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col style={{ paddingRight: 0}}>\r\n                <Form.Group controlId=\"validateIngredients\">\r\n                  <Form.Control required type=\"ingredients\" placeholder=\"Enter ingredients..\" onChange={this.handleIngredientChange}/>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Please select atleast one ingredient!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md=\"auto\" style={{ paddingLeft: 0}}>\r\n                <Button variant=\"primary\" type=\"submit\">Search</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          <br></br>\r\n          <h2>Searched recipes:</h2>\r\n          <Row className=\"justify-content-md-center\">\r\n          {\r\n              this.state.resultingRecipes.map((recipe) =>\r\n                  <Card key={recipe.id} style={{ width: '18rem' }}>\r\n                    <br></br>\r\n                    <div className=\"text-center\">\r\n                      <Image\r\n                          width={256}\r\n                          height={256}\r\n                          src={recipe.image}\r\n                          alt={recipe.title}\r\n                          fluid/>\r\n                    </div>\r\n                      <Card.Body className=\"flex-column d-flex\">\r\n                        <Card.Title>\r\n                          {recipe.title}\r\n                        </Card.Title>\r\n                        <div className=\"mt-auto\">\r\n                          <p>\r\n                            Missing Ingredients: 0\r\n                          </p>\r\n                          <Button variant=\"success\" onClick={() => {this.showRecipes(recipe.id, recipe.title)}}>View full recipe</Button>\r\n                        </div>\r\n                      </Card.Body>\r\n                  </Card>\r\n              )\r\n            }\r\n            <RecipeModal show={this.state.showRecipe} onHide={this.closeRecipes} modalId={this.state.recipeId} modalTitle={this.state.recipeTitle}/>\r\n            </Row>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './js/App';\r\nimport * as serviceWorker from './js/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}